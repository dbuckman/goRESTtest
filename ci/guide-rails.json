{
	"metadata": {
		"version": 2
	},
	"application": {
		"name": "goRESTtest",
		"language": "GOLANG",
		"artifact_store": {
			"repositories": null
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"exit_actions": {},
				"deployment_strategy": {},
				"application_init": {},
				"packages": [
					{
						"name": "((application.name))",
						"downloads": [],
						"files": [
							"((application.name))*"
						]
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"tasks": [
					{
						"name": "goRESTtest",
						"steps": [
							{
								"name": "Get Dependencies",
								"definition": "Get Dependencies",
								"command": "go get -t -d ./...",
								"properties": null
							},
							{
								"name": "Unit Tests",
								"definition": "Unit Tests",
								"command": "ginkgo -cover -r -v -skip-package=pb,test,mock,proto,testdata | tee ginkgo.output\n\tcat ginkgo.output 2\u003e\u00261 | go-junit-report \u003e test.xml",
								"properties": null
							},
							{
								"name": "Convert coverage",
								"definition": "Convert coverage",
								"command": "gocov convert coverprofile.out | gocov-xml \u003e coverage.xml",
								"properties": null
							},
							{
								"name": "Build",
								"definition": "Build",
								"command": "go build -o ((application.name)) cmd/restTest/main.go",
								"properties": null
							},
							{
								"name": "Build and Push to ECR",
								"definition": "Build and Push to ECR",
								"command": "echo \"Running Build and Push\"\nAWS_REGION=us-east-1\nAWS_ROLE_ARN=arn:aws:iam::189768267137:role/GuideRailsRole\nAWS_SESSION_NAME=ARCH_GR_Session\nECR_HOST=189768267137.dkr.ecr.us-east-1.amazonaws.com\nECR_REPO=goresttest\nIMAGE_NAME=\"$ECR_HOST/$ECR_REPO:latest\"\n\ndocker build -t goresttest -t ${IMAGE_NAME} .\necho \"docker build done\"\n\n## Build-only setup\nOS=`uname -s | cut -b 1-5`\nif [ \"$OS\" == 'Linux' ]; then\n  apt-get -y -qq install awscli jq gettext-base\n  aws --profile default configure set aws_access_key_id \"$AWS_ACCESS_KEY\"\n  aws --profile default configure set aws_secret_access_key \"$AWS_SECRET_KEY\"\nfi\n\n## Assume AWS role\nSTS=`aws sts assume-role --role-arn $AWS_ROLE_ARN --role-session-name $AWS_SESSION_NAME --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'`\nexport AWS_ACCESS_KEY_ID=`echo $STS | jq -r '.[0]'`\nexport AWS_SECRET_ACCESS_KEY=`echo $STS | jq -r '.[1]'`\nexport AWS_SESSION_TOKEN=`echo $STS | jq -r '.[2]'`\n\n## Push Image to ECR\necho \"pushing to ECR\"\naws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_HOST\ndocker push $IMAGE_NAME",
								"properties": null
							}
						],
						"docker_options": {}
					}
				]
			},
			{
				"name": "Isolation",
				"segment_type": "isolation",
				"run_after": [
					"Build"
				],
				"exit_actions": {},
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"package_dependencies": [
					"((application.name))"
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"source_code_available": true,
				"tasks": [
					{
						"name": "ECS",
						"steps": [
							{
								"name": "Deploy to ECS",
								"definition": "Deploy to ECS",
								"command": "AWS_REGION=us-east-1\nAWS_ROLE_ARN=arn:aws:iam::189768267137:role/GuideRailsRole\nAWS_SESSION_NAME=ARCH_GR_Session\nBASEDIR=$(dirname \"$0\")\nECS_CLUSTER=dbuckman-cluster\nECS_EXECUTION_ROLE_ARN=arn:aws:iam::189768267137:role/ecsTaskExecutionRole\nECS_SERVICE=goRESTtest-service\nECS_TASK_DEFINITION=goRESTtest-app\nECR_HOST=189768267137.dkr.ecr.us-east-1.amazonaws.com\nECR_REPO=goresttest\nIMAGE_NAME=\"$ECR_HOST/$ECR_REPO:latest\"\n\n\ntemplate='{\"family\": \"goRESTtest-app\", \"networkMode\": \"awsvpc\", \"containerDefinitions\": [{ \"name\": \"golang-hello\", \"image\": \"%s\", \"portMappings\": [{ \"hostPort\": 80, \"protocol\": \"tcp\", \"containerPort\": 8000 }], \"essential\": true }], \"requiresCompatibilities\": [\"FARGATE\"], \"cpu\": \"256\", \"memory\": \"512\" }'\n\nECS_TASK_TEMPLATE = \"\"\nprintf -v ECS_TASK_TEMPLATE \"$template\" \"$IMAGE_NAME\"\n\n\n## Build-only setup\nOS=`uname -s | cut -b 1-5`\nif [ \"$OS\" == 'Linux' ]; then\n  apt-get -y -qq install awscli jq gettext-base\n  aws --profile default configure set aws_access_key_id \"$AWS_ACCESS_KEY\"\n  aws --profile default configure set aws_secret_access_key \"$AWS_SECRET_KEY\"\nfi\n\n## Assume AWS role\nSTS=`aws sts assume-role --role-arn $AWS_ROLE_ARN --role-session-name $AWS_SESSION_NAME --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'`\nexport AWS_ACCESS_KEY_ID=`echo $STS | jq -r '.[0]'`\nexport AWS_SECRET_ACCESS_KEY=`echo $STS | jq -r '.[1]'`\nexport AWS_SESSION_TOKEN=`echo $STS | jq -r '.[2]'`\n\n## Create updated ECS task-def for our image\ncat \u003e temp-task-def.json \u003c\u003c- EOM\\n${ECS_TASK_TEMPLATE}\\nEOM \n \nECS_TASK_REVISION=`aws ecs register-task-definition --region $AWS_REGION --execution-role-arn $ECS_EXECUTION_ROLE_ARN --cli-input-json 'file://temp-task-def.json' | jq .taskDefinition.revision`\n\n## Clean up temp file\nrm -f temp-task-def.json\n\n## Update ECS service with new revision of our definition\naws ecs update-service --region $AWS_REGION --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $ECS_TASK_DEFINITION:$ECS_TASK_REVISION \u003e /dev/null",
								"properties": null
							}
						],
						"docker_options": {}
					}
				]
			}
		],
		"exit_actions": {},
		"default_properties": [
			{
				"name": "gr.docker.enabled",
				"value": "true",
				"description": "Enable Docker",
				"type": "boolean"
			}
		],
		"deployment_files": [],
		"application_init": {}
	},
	"organization": {
		"orgname": "CloudBees"
	}
}