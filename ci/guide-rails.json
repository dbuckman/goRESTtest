{
	"metadata": {
		"version": 2
	},
	"application": {
		"name": "goRESTtest",
		"language": "GOLANG",
		"artifact_store": {
			"repositories": null
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"exit_actions": {},
				"deployment_strategy": {},
				"application_init": {},
				"packages": [
					{
						"name": "((application.name))",
						"downloads": [],
						"files": [
							"((application.name))*"
						]
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"tasks": [
					{
						"name": "goRESTtest",
						"steps": [
							{
								"name": "Get Dependencies",
								"definition": "Get Dependencies",
								"command": "go get -t -d ./...",
								"properties": null
							},
							{
								"name": "Unit Tests",
								"definition": "Unit Tests",
								"command": "ginkgo -cover -r -v -skip-package=pb,test,mock,proto,testdata | tee ginkgo.output\n\tcat ginkgo.output 2\u003e\u00261 | go-junit-report \u003e test.xml",
								"properties": null
							},
							{
								"name": "Convert coverage",
								"definition": "Convert coverage",
								"command": "gocov convert coverprofile.out | gocov-xml \u003e coverage.xml",
								"properties": null
							},
							{
								"name": "Build",
								"definition": "Build",
								"command": "go build -o ((application.name)) cmd/restTest/main.go",
								"properties": null
							},
							{
								"name": "Build and Push to ECR",
								"definition": "Build and Push to ECR",
								"command": "echo \"Running Build and Push\"\nAWS_REGION=us-east-1\nAWS_ROLE_ARN=arn:aws:iam::189768267137:role/GuideRailsRole\nAWS_SESSION_NAME=ARCH_GR_Session\nECR_HOST=189768267137.dkr.ecr.us-east-1.amazonaws.com\nECR_REPO=goresttest\nIMAGE_NAME=\"$ECR_HOST/$ECR_REPO:${IMAGE_VERSION:-latest}\"\n\ndocker build -t goresttest -t ${ECR_HOST}/${ECR_REPO}:${IMAGE_VERSION} .\n\n## Build-only setup\nOS=`uname -s | cut -b 1-5`\nif [ \"$OS\" == 'Linux' ]; then\n  apt-get -y -qq install awscli jq gettext-base\n  aws --profile default configure set aws_access_key_id \"$AWS_ACCESS_KEY\"\n  aws --profile default configure set aws_secret_access_key \"$AWS_SECRET_KEY\"\nfi\n\n## Assume AWS role\nSTS=`aws sts assume-role --role-arn $AWS_ROLE_ARN --role-session-name $AWS_SESSION_NAME --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'`\nexport AWS_ACCESS_KEY_ID=`echo $STS | jq -r '.[0]'`\nexport AWS_SECRET_ACCESS_KEY=`echo $STS | jq -r '.[1]'`\nexport AWS_SESSION_TOKEN=`echo $STS | jq -r '.[2]'`\n\n## Push Image to ECR\naws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_HOST\ndocker push $IMAGE_NAME",
								"properties": null
							}
						],
						"docker_options": {}
					}
				]
			}
		],
		"exit_actions": {},
		"default_properties": [
			{
				"name": "gr.docker.enabled",
				"value": "true",
				"description": "Enable Docker",
				"type": "boolean"
			}
		],
		"deployment_files": [],
		"application_init": {}
	},
	"organization": {
		"orgname": "CloudBees"
	}
}